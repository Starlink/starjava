<?xml version="1.0"?>

<!--
 !   Main source build file
 !
 !   This file describes how to build the Starlink java system from a
 !   source release. It requires Apache ANT and a Java Development Kit.
 !
 !   The main targets are:
 !
 !      build          -> compiles the system
 !      javadocs       -> creates packages API documentation
 !      javadocs-full  -> creates the complete API documentation
 !      install        -> installs the system and documentation
 !      deinstall      -> deinstalls the system
 !      clean          -> cleans up the build
 !      export         -> create full export distributions of packages
 !      export-full    -> exports all monolithic archives
 !      export-full-source -> exports full source archives
 !      export-full-built  -> exports monolithic runtime distributions
 !      export-full-docs   -> exports monolithic docs archive
 !      test           -> run any JUnit tests in the system
 !      keystore       -> generate a keystore for signing jar files
 !      system         -> make report of JVM system properties
 !
 !   Authors:
 !      Peter W. Draper (2-JUL-2002)
 !
 !-->

<project name="Build file for Starlink" default="build" basedir=".">

  <!-- If either or both of these files exist then any properties
   !   contained within them will override those defined here.  -->
  <property file="${user.home}/.stardev.properties"/>
  <property file=".properties"/>

  <!--
   !  =================
   !  Global Properties
   !  =================
   !-->

  <!-- Directory for the Starlink installation (usually /star/java)-->
  <property name="star.dir" value="${basedir}/../"/>

  <!-- Directory to install into (install target, usually /star/java)-->
  <property name="star.install" value="${star.dir}"/>

  <!-- Directory that contains the Starlink jar tree -->
  <property name="star.jar.dir" value="${star.dir}/lib"/>

  <!-- Directory that contains the locally built sources (usually
   !   /star/java/source for full distribution) -->
  <property name="star.build.dir" value="${basedir}"/>

  <!-- Whether to generate Java documentation -->
  <property name="javadocs.required" value="false"/>

  <!-- Directory that any archives should be placed into. The local
   !   directory by default -->
  <property name="star.archive.dir" value="${basedir}"/>

  <!-- URL and package-list for linking against full Java docs -->
  <property name="javaapi.url" value="https://docs.oracle.com/javase/8/docs/api/"/>
  <property name="javaapi.lis" value="${star.build.dir}/src/docs/javaapi/"/>

  <!-- Webstart and jar signing properties. -->
  <property name="webstart.codebase"
            value="http://starlink.jach.hawaii.edu/starjava/lib"/>
  <property name="webstart.alias" value="Starlink-UK"/>
  <property name="webstart.keystore" value="${star.build.dir}/keystore"/>
  <property name="webstart.keypass" value="Vroomfondel"/>
  <property name="webstart.storepass" value="Majikthise"/>
  <property name="webstart.starlink_logo" value="starlink_logo_med.gif"/>
  <property name="webstart.signer" value="${user.name}"/>

  <!--
   !  ================
   !  Local Properties
   !  ================
   !-->

  <!-- Define the package name and current versions. Use "full" names
   !   to avoid passing these down the packages. All parameters are
   !   passed by default. -->
  <property name="FullName" value="Starlink-UK"/>
  <property name="fullname" value="starlink"/>
  <property name="fullversion" value="0.1"/>

  <!-- Compilation options -->
  <property name="debug" value="true"/>
  <property name="deprecation" value="false"/>
  <property name="optimize" value="true"/>

  <!-- Default target for the sub-packages -->
  <property name="what" value="build"/>

  <!-- Directory for the complete java documentation -->
  <property name="docs.dir" value="${basedir}/docs"/>
  <property name="docs.javadocs" value="${docs.dir}/javadocs"/>

  <!-- Local directory for support files -->
  <property name="support.dir" value="${basedir}/src"/>
  <property name="support.docs" value="${support.dir}/docs"/>
  <property name="support.etc" value="${support.dir}/etc"/>

  <!--
   !  ======================================
   !  Execute all ANT in all sub-directories
   !  ======================================
   !
   !  Execute a target in each of the sub-directories. The target
   !  invoked is defined by the "what" property. New packages should
   !  have an entry created in the correct dependency order. Note
   !  that all properties defined in this file are passed on.
   !-->
  <target name="call_package_ant">

    <echo message="Executing JUnit target: ${what}"/>
    <ant dir="./junit" target="${what}"/>

    <echo message="Executing tamfits target: ${what}"/>
    <ant dir="./tamfits" target="${what}"/>

    <echo message="Executing axis target: ${what}"/>
    <ant dir="./axis" target="${what}"/>

    <echo message="Executing Jetty target: ${what}"/>
    <ant dir="./jetty" target="${what}"/>

    <echo message="Executing AUTH target: ${what}"/>
    <ant dir="./auth" target="${what}"/>

    <echo message="Executing UTIL target: ${what}"/>
    <ant dir="./util" target="${what}"/>

    <echo message="Executing SOAPSERVER target: ${what}"/>
    <ant dir="./soapserver" target="${what}"/>

    <echo message="Executing XDOC target: ${what}"/>
    <ant dir="./xdoc" target="${what}"/>

    <echo message="Executing PLASTIC target: ${what}"/>
    <ant dir="./plastic" target="${what}"/>

    <echo message="Executing JSAMP target: ${what}"/>
    <ant dir="./jsamp" target="${what}"/>

    <echo message="Executing Task target: ${what}"/>
    <ant dir="./task" target="${what}"/>

    <echo message="Executing CONNECT target: ${what}"/>
    <ant dir="./connect" target="${what}"/>

    <echo message="Executing JNIAST target: ${what}"/>
    <ant dir="./jniast" target="${what}"/>

    <echo message="Executing Pal target: ${what}"/>
    <ant dir="./pal" target="${what}"/>

    <echo message="Executing DIVA target: ${what}"/>
    <ant dir="./diva" target="${what}"/>

    <echo message="Executing HELP target: ${what}"/>
    <ant dir="./help" target="${what}"/>

    <echo message="Executing ASTGUI target: ${what}"/>
    <ant dir="./astgui" target="${what}"/>

    <echo message="Executing JNIHDS target: ${what}"/>
    <ant dir="./jnihds" target="${what}"/>

    <echo message="Executing HDX target: ${what}"/>
    <ant dir="./hdx" target="${what}"/>

    <echo message="Executing NDArray target: ${what}"/>
    <ant dir="./array" target="${what}"/>

    <echo message="Executing NDX target: ${what}"/>
    <ant dir="./ndx" target="${what}"/>

    <echo message="Executing Table target: ${what}"/>
    <ant dir="./table" target="${what}"/>

    <echo message="Executing TJoin target: ${what}"/>
    <ant dir="./tjoin" target="${what}"/>

    <echo message="Executing Mirage target: ${what}"/>
    <ant dir="./mirage" target="${what}"/>

    <echo message="Executing NDTools target: ${what}"/>
    <ant dir="./ndtools" target="${what}"/>

    <echo message="Executing HDS target: ${what}"/>
    <ant dir="./hds" target="${what}"/>

    <echo message="Executing FITS target: ${what}"/>
    <ant dir="./fits" target="${what}"/>

    <echo message="Executing OLDFITS target: ${what}"/>
    <ant dir="./oldfits" target="${what}"/>

    <echo message="Executing JSky target: ${what}"/>
    <ant dir="./jsky" target="${what}"/>

    <echo message="Executing VOTable target: ${what}"/>
    <ant dir="./votable" target="${what}"/>

    <echo message="Executing CDF target: ${what}"/>
    <ant dir="./cdf" target="${what}"/>

    <echo message="Executing PARQUET target: ${what}"/>
    <ant dir="./parquet" target="${what}"/>

    <echo message="Excecuting FEATHER target: ${what}"/>
    <ant dir="./feather" target="${what}"/>

    <echo message="Executing ECSV target: ${what}"/>
    <ant dir="./ecsv" target="${what}"/>

    <echo message="Executing PDS target: ${what}"/>
    <ant dir="./pds" target="${what}"/>

    <echo message="Executing GBIN target: ${what}"/>
    <ant dir="./gbin" target="${what}"/>

    <echo message="Executing DPAC target: ${what}"/>
    <ant dir="./dpac" target="${what}"/>

    <echo message="Executing RAYREG target: ${what}"/>
    <ant dir="./rayreg" target="${what}"/>

    <echo message="Executing REGISTRY target: ${what}"/>
    <ant dir="./registry" target="${what}"/>

    <echo message="Executing VO target: ${what}"/>
    <ant dir="./vo" target="${what}"/>

    <echo message="Executing TFCAT target: ${what}"/>
    <ant dir="./tfcat" target="${what}"/>

    <echo message="Excecuting SRB target: ${what}"/>
    <ant dir="./srb" target="${what}"/>

    <echo message="Executing AstroGrid target: ${what}"/>
    <ant dir="./astrogrid" target="${what}"/>

    <echo message="Executing TTOOLS target: ${what}"/>
    <ant dir="./ttools" target="${what}"/>

    <echo message="Executing DATANODE target: ${what}"/>
    <ant dir="./datanode" target="${what}"/>

    <echo message="Executing JAIUtil target: ${what}"/>
    <ant dir="./jaiutil" target="${what}"/>

 <!--   <echo message="Executing JPCS target: ${what}"/> -->
 <!--   <ant dir="./jpcs" target="${what}"/> -->

 <!--   <echo message="Executing StarTask target: ${what}"/> -->
 <!--   <ant dir="./startask" target="${what}"/> -->

 <!--   <echo message="Executing JNIKAPPA target: ${what}"/> -->
 <!--   <ant dir="./jnikappa" target="${what}"/> -->

    <echo message="Executing SOG target: ${what}"/>
    <ant dir="./sog" target="${what}"/>

    <echo message="Executing SPLAT target: ${what}"/>
    <ant dir="./splat" target="${what}"/>

    <echo message="Executing TOPCAT target: ${what}"/>
    <ant dir="./topcat" target="${what}"/>

    <echo message="Executing Treeview target: ${what}"/>
    <ant dir="./treeview" target="${what}"/>

    <echo message="Executing Coco target: ${what}"/>
    <ant dir="./coco" target="${what}"/>

    <echo message="Executing RV target: ${what}"/>
    <ant dir="./rv" target="${what}"/>

    <echo message="Executing FROG target: ${what}"/>
    <ant dir="./frog" target="${what}"/>

  </target>

  <!--
   !   =================
   !   Prepare the build
   !   =================
   !
   !  Do any jobs that are required before any other target can
   !  proceed. This isn't used at present, but shows the sort of thing
   !  you might want to do.
   !-->
  <target name="prepare">
    <tstamp>
      <format property="year" pattern="yyyy" />
    </tstamp>
    <filterchain id="install.filters">
      <replacetokens>
        <token key="VERSION" value="${version}" />
        <token key="DATE" value="${TODAY}" />
        <token key="TIME" value="${TSTAMP}" />
      </replacetokens>
    </filterchain>
  </target>

  <!--
   !   ==================
   !   Build all packages
   !   ==================
   !-->
  <target name="build" depends="prepare"
          description="--> compiles all packages">

     <antcall target="call_package_ant">
        <param name="what" value="build"/>
     </antcall>

  </target>

  <!--
   !   ============================================
   !   Cleans up build and distribution directories
   !   ============================================
   !-->
  <target name="clean" depends="prepare" description="--> cleans up build">

     <antcall target="call_package_ant">
        <param name="what" value="clean"/>
     </antcall>

  </target>

  <!--
   !   ================================
   !   Install into the "Starlink" tree
   !   ================================
   !-->
  <target name="install" depends="prepare"
          description="--> install into Starlink tree">

     <antcall target="call_package_ant">
        <param name="what" value="install"/>
     </antcall>

  </target>

  <!--
   !   ===================================
   !   De-install from the "Starlink" tree
   !   ===================================
   !-->
  <target name="deinstall" depends="prepare"
          description="--> undo the install target">

     <antcall target="call_package_ant">
        <param name="what" value="deinstall"/>
     </antcall>

  </target>

  <!--
   !   =========================================
   !   Creates API documentation in each package
   !   =========================================
   !
   !  Create the documentation in each package.
   !
   !-->
  <target name="javadocs" depends="prepare"
          description="--> generate the java documentation">

     <antcall target="call_package_ant">
        <param name="what" value="javadocs"/>
     </antcall>

  </target>

  <!--
   !   =============================================
   !   Creates the complete system API documentation
   !   =============================================
   !
   !  Creates the complete javadocs for all local source packages.
   !-->
  <target name="javadocs-full" depends="prepare"
          description="--> generate the complete java documentation">

     <!-- First make the all the java source available in a suitable
      !   fashion for gathering together. -->
     <antcall target="call_package_ant">
        <param name="what" value="javadoc-sources"/>
     </antcall>

     <!-- Generate a classpath that should include the compiled forms
      !   of all the source we're about to document.
      !-->
     <path id="classpath">
       <dirset dir="${star.build.dir}">
          <include name="*/build/classes"/>
       </dirset>
       <fileset dir="${star.build.dir}">
          <include name="*/lib/*/*.jar"/>
       </fileset>
     </path>

     <delete dir="${docs.javadocs}"/>
     <mkdir dir="${docs.javadocs}"/>
     <javadoc useexternalfile="yes"
              destdir="${docs.javadocs}"
              author="true"
              version="true"
              locale="en"
              windowtitle="${FullName} API"
              doctitle="${FullName}"
              protected="true"
              classpathref="classpath">
      <arg value="-Xdoclint:none"/>

      <!-- Get all possible package names from the build/java
       !   directories. Need to name all top-level packages
       !   unfortunately (rather than just get all source file names)
       !   otherwise internal linking doesn't work well. If a single
       !   packageset (which is really a dirset) that could be
       !   modified to remove the "{package}/build/java" part could be
       !   created then this would be unnecessary (TODO: look into
       !   this and maybe create a special type).
       !-->
      <packageset dir="auth/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="util/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="soapserver/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="xdoc/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="plastic/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="task/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="connect/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jniast/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="astgui/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jnihds/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="array/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="ndx/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="table/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="tjoin/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="hds/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="fits/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="oldfits/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="votable/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="cdf/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="feather/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="parquet/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="ecsv/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="pds/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="gbin/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="dpac/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="ttools/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="registry/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="vo/build/java" defaultexcludes="yes">
         <exclude name="net/ivoa/www/**"/>
      </packageset>

      <packageset dir="tfcat/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="srb/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="astrogrid/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="datanode/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="hdx/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jaiutil/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="mirage/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="pal/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="coco/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="rv/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="diva/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <group title="${FullName} API" packages="uk.ac.starlink.*"/>

      <!-- Third party packages built from source -->
      <packageset dir="tamfits/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>
      <group title="nom.tam.fits API" packages="nom.*"/>

      <packageset dir="jsky/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>
      <group title="JSky API" packages="jsky.*"/>

      <!-- Link to the full Java API at SUNs website -->
      <link offline="true" href="${javaapi.url}"
            packagelistLoc="${javaapi.lis}"/>

      <!-- TODO: link to static third party docs, need fixed relative
       !   positions or pretend offline and use a package list -->

      <bottom><![CDATA[<i>Copyright &#169; ${year} Central Laboratory of the Research Councils. All Rights Reserved.<i>]]></bottom>
    </javadoc>

  </target>

  <!--
   !   ===============================
   !   Create the export distributions
   !   ===============================
   !-->
  <target name="export" depends="prepare"
          description="--> create all export archives">

     <antcall target="call_package_ant">
        <param name="what" value="export"/>
     </antcall>

  </target>

  <!-- Properties used for building full export archives. -->
  <property name="archive.name" value="starjava"/>
  <property name="archive.jni.name" value="${archive.name}-${os.arch}"/>
  <property name="archive.top" value="starjava/"/>
  <property name="tar.user" value="${user.name}"/>
  <property name="tar.group" value="star"/>
  <property name="licence.file" value="LICENCE.txt"/>
  <property name="export.readme" value="README"/>

  <!--
   !   ========================================
   !   Export source, docs and runtime archives
   !   ========================================
   !-->
  <target name="export-full"
          depends="export-full-source,export-full-built,export-full-docs"
          description="--> exports all monolithic archives">
    <copy todir="${star.archive.dir}">
      <fileset dir="${support.etc}">
        <include name="${licence.file}"/>
        <include name="${export.readme}"/>
      </fileset>
    </copy>
  </target>

  <!--
   !   ===========================
   !   Export full source archives
   !   ===========================
   !-->
  <target name="export-full-source"
          depends="deinstall,clean"
          description="--> exports monolithic source archive">

    <!-- Export a tree consisting of all and only the java source files
     !   in the namespace uk.ac.starlink.*, in a single zip file of the
     !   corresponding structure.  For casual browsing or building,
     !   this is more digestible than the full tree of packages and build
     !   machinery.  -->

    <!-- Ensure that all the source code is available. -->
    <antcall target="call_package_ant">
      <param name="what" value="javadoc-sources"/>
    </antcall>

    <!-- Copy all the files in the starlink namespace to a scratch directory -->
    <property name="source.tree.dir" value="${star.build.dir}/build/java"/>
    <mkdir dir="${source.tree.dir}"/>
    <copy todir="${source.tree.dir}">
      <fileset dir="${star.build.dir}"
               includes="*/src/main/uk/ac/starlink/**/*.java"/>
      <fileset dir="${star.build.dir}"
               includes="*/build/java/uk/ac/starlink/**"/>
      <mapper type="regexp" from="(uk/ac/starlink/.*)" to="\1"/>
    </copy>
    <copy todir="${source.tree.dir}" file="${support.etc}/${licence.file}"/>

    <!-- Construct a zip file from the scratch directory. -->
    <zip destfile="${star.archive.dir}/${archive.name}-src.zip"
         basedir="${source.tree.dir}"/>

    <!-- Tidy up by deleting the scratch directory -->
    <delete dir="${source.tree.dir}"/>

  </target>

  <!--
   !   ==========================
   !   Export full built archives
   !   ==========================
   !-->
  <target name="export-full-built"
          depends="install"
          description="--> exports monolithic runtime distributions">

    <tar destfile="${star.archive.dir}/${archive.name}.tar.gz"
         longfile="gnu" compression="gzip">
      <tarfileset dir="${support.etc}" includes="${licence.file}"
                                            prefix="${archive.top}"
                                            username="${tar.user}"
                                            group="${tar.group}"/>
      <tarfileset dir="${star.install}/bin" prefix="${archive.top}bin"
                                            username="${tar.user}"
                                            group="${tar.group}"
                                            mode="755"/>
      <tarfileset dir="${star.install}/etc" prefix="${archive.top}etc"
                                            username="${tar.user}"
                                            group="${tar.group}"/>
      <tarfileset dir="${star.install}/lib" prefix="${archive.top}lib"
                                            username="${tar.user}"
                                            group="${tar.group}"/>
    </tar>

    <zip destfile="${star.archive.dir}/${archive.name}.zip">
      <zipfileset dir="${support.etc}" includes="${licence.file}"
                                            prefix="${archive.top}"/>
      <zipfileset dir="${star.install}/bin" prefix="${archive.top}bin"/>
      <zipfileset dir="${star.install}/etc" prefix="${archive.top}etc"/>
      <zipfileset dir="${star.install}/lib" prefix="${archive.top}lib"/>
    </zip>

  </target>

  <!--
   !   =======================================
   !   Create a keystore for signing jar files
   !   =======================================
   !
   !   Note this only works if a keystore doesn't already exist.
   !   Should only be necessary to do this from time to time (when
   !   validity peroid expires?).
   !-->
  <target name="keystore">
    <genkey alias="${webstart.alias}"
           keystore="${webstart.keystore}"
           storepass="${webstart.storepass}"
           keypass="${webstart.keypass}"
           dname="CN=${webstart.signer}, O=${FullName}, L=RAL, C=UK"/>

     <!-- dname format:
      !      CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode-->

     <!-- Probably a good time to sign ANT -->
     <antcall target="sign_ant"/>

  </target>

  <!--
   !   ===================
   !   Sign ANTs jar files
   !   ===================
   !   Can only do this once a keystore has been created..., so must
   !   be done after ANT has been built
   !-->
  <target name="sign_ant">

    <ant dir="./ant" inheritAll="false" target="sign_jars"/>

  </target>

  <!--
   !   =================================
   !   Export full documentation archive
   !   =================================
   !-->
  <target name="export-full-docs"
          depends="javadocs-full,install"
          description="--> exports monolithic doc and javadoc archive">
    <zip destfile="${star.archive.dir}/${archive.name}-docs.zip">
      <zipfileset dir="${support.etc}" includes="${licence.file}"
                                             prefix="${archive.top}"/>
      <zipfileset dir="${docs.dir}/javadocs" prefix="${archive.top}javadocs"/>

      <!-- Pick up non-javadoc docs from the installation -->
      <zipfileset dir="${star.install}/docs" prefix="${archive.top}docs"
         excludes="**/javadocs/**"/>
    </zip>
  </target>

  <!--
   !   =================
   !   Run the testcases
   !   =================
   !-->
  <target name="test" depends="prepare"
          description="--> run all the test targets">

     <antcall target="call_package_ant">
        <param name="what" value="test"/>
     </antcall>

  </target>

  <!--
   !   ========================
   !   Report system properties
   !   ========================
   !-->
  <target name="system"
          description="--> report system properties">

    <echo message="System properties:"/>
    <echo message=" java.version = ${java.version}"/>
    <echo message=" java.vendor = ${java.vendor}"/>
    <echo message=" java.vendor.url = ${java.vendor.url}"/>
    <echo message=" java.home = ${java.home}"/>
    <echo message=" java.vm.specification.version = ${java.vm.specification.version}"/>
    <echo message=" java.vm.specification.vendor = ${java.vm.specification.vendor}"/>
    <echo message=" java.vm.specification.name = ${java.vm.specification.name}"/>
    <echo message=" java.vm.version = ${java.vm.version}"/>
    <echo message=" java.vm.vendor = ${java.vm.vendor}"/>
    <echo message=" java.vm.name = ${java.vm.name}"/>
    <echo message=" java.specification.version = ${java.specification.version}"/>
    <echo message=" java.specification.vendor = ${java.specification.vendor}"/>
    <echo message=" java.specification.name = ${java.specification.name}"/>
    <echo message=" java.class.version = ${java.class.version}"/>
    <echo message=" java.class.path = ${java.class.path}"/>
    <echo message=" java.library.path = ${java.library.path}"/>
    <echo message=" java.io.tmpdir = ${java.io.tmpdir}"/>
    <echo message=" java.compiler = ${java.compiler}"/>
    <echo message=" java.ext.dirs = ${java.ext.dirs}"/>
    <echo message=" os.name = ${os.name}"/>
    <echo message=" os.arch = ${os.arch}"/>
    <echo message=" os.version = ${os.version}"/>
    <echo message=" file.separator = ${file.separator}"/>
    <echo message=" path.separator = ${path.separator}"/>
    <echo message=" line.separator = ${line.separator}"/>
    <echo message=" user.name = ${user.name}"/>
    <echo message=" user.home = ${user.home}"/>
    <echo message=" user.dir = ${user.dir}"/>
  </target>

</project>
