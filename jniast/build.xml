<?xml version="1.0"?>

<!--
 !   JNIAST build file
 !
 !   This file describes how to build the JNIAST package from a source
 !   release. It requires Apache ANT and a Java Development Kit.
 !
 !      build            -> compiles the source code
 !      build-native     -> builds native libraries from C sources
 !      build-source     -> builds java source code from perl and AST
 !      clean            -> cleans up build and dist products
 !      deinstall        -> undo the install target
 !      dist             -> creates the local binary distribution
 !      export           -> creates the full distribution archives
 !      export-runonly   -> creates the runonly distribution archives
 !      export-source    -> creates the source distribution archives
 !      install          -> install distribution into Starlink tree
 !      install-runonly  -> install a runonly distribution into Starlink tree
 !      jars             -> creates the package jar file
 !      javadocs         -> creates the API documentation
 !      javadoc-sources  -> make source files for release API documention
 !      test             -> runs JUnit tests
 !
 !   Authors:
 !      Peter W. Draper (2-JUL-2002)
 !      Mark Taylor (31-JUL-2002)
 !
 !   Version:
 !      $Id$
 !
 !-->

<project name="Build file for JNIAST" default="build" basedir=".">

  <!-- If either or both of these files exist then any properties
   !   contained within them will override those defined here.  -->
  <property file="${user.home}/.stardev.properties"/>
  <property file=".properties"/>

  <!-- Properties will also be set for all environment variables
   !   (PATH becomes "env.PATH"), generally not a good
   !   idea as names are OS dependent -->
  <property environment="env"/>

  <!--
   !  =================
   !  Global Properties
   !  =================
   !-->

  <!-- Directory for the Starlink installation (usually /star/java)-->
  <property name="star.dir" value="${basedir}/../../"/>

  <!-- Directory to install into (install target, usually /star/java)-->
  <property name="star.install" value="${star.dir}"/>

  <!-- Directory that contains the Starlink jar tree -->
  <property name="star.jar.dir" value="${star.dir}/lib"/>

  <!-- Directory that contains the locally built sources (usually
   !   /star/java/source for full distribution) -->
  <property name="star.build.dir" value="${basedir}/../"/>

  <!-- Directory that any archives should be placed into. The local
   !   directory by default -->
  <property name="star.archive.dir" value="${basedir}"/>

  <!-- URL and package-list for linking against full Java docs -->
  <property name="javaapi.url" value="https://docs.oracle.com/javase/8/docs/api/"/>
  <property name="javaapi.lis" value="${star.build.dir}/src/docs/javaapi/"/>

  <!-- The environment CLASSPATH is ignored by Ant tasks. -->
  <property name="build.sysclasspath" value="ignore"/>

  <!--
   !  ================
   !  Local Properties
   !  ================
   !-->

  <!-- Define the package name and current versions -->
  <!-- Note this version is the same as the lowest version of AST required
   !   for this package to build and run normally.  Higher versions of
   !   AST may be desirable e.g. if they contain bugfixes.  The test
   !   target may fail if a particular version, later than this, is
   !   not installed (is this sensible behaviour?) -->
  <property name="Name" value="JNIAST"/>
  <property name="name" value="jniast"/>
  <property name="version" value="5.1"/>

  <!-- The Java package name -->
  <property name="package.name" value="uk.ac.starlink.ast"/>
  <property name="package.path" value="uk/ac/starlink/ast"/>

  <!-- Compilation options -->
  <property name="debug" value="true"/>
  <property name="deprecation" value="false"/>
  <property name="optimize" value="true"/>
  <property name="source.version" value="1.8"/>

  <!-- Extra task options, if any -->
  <property name="chmod.fail" value="false"/>

  <!-- JUnit test options -->
  <property name="junit.fork" value="true"/>
  <property name="junit.filtertrace" value="on"/>
  <property name="junit.summary" value="no"/>

  <!-- Directory containing the package source -->
  <property name="src.dir" value="${basedir}/src"/>

  <!-- Directory containing the java source (top of the namespace)-->
  <property name="java.dir" value="${src.dir}/main"/>

  <!-- Directory containing any script required to execute or setup package-->
  <property name="script.dir" value="${src.dir}/script"/>

  <!-- Directory containing any third-party jars that should be
   !   distributed (normally these would belong in a proper package)-->
  <property name="src.jars.dir" value="${src.dir}/lib"/>

  <!-- Directories for JUnit test cases and related files -->
  <property name="tests.dir" value="${src.dir}/testcases"/>
  <property name="tests.etc.dir" value="${src.dir}/etc/testcases"/>

  <!-- File types that should not be passed through a filterchain when
   !   copying -->
  <property name="unfiltered.files" value="**/*.gif,**/*.jpg,**/*.ico"/>

  <!-- Directories to receive the various build components -->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.java" value="${build.dir}/java"/>
  <property name="build.jni" location="${build.dir}/jni"/>
  <property name="build.lib" location="${build.dir}/lib"/>
  <property name="build.tests" value="${build.dir}/testcases"/>
  <property name="build.tests.javadocs" value="${build.dir}/javadocs.test/"/>

  <!-- Distribution directories, these are created in the current
   !   directory, unless dist.dir is redefined. Files that will be
   !   installed under a package name prefixed directory should be
   !   placed in the ".pkg" variants -->
  <property name="dist.dir" value="${basedir}"/>

  <property name="dist.bin" value="${dist.dir}/bin"/>
  <property name="dist.lib" value="${dist.dir}/lib"/>
  <property name="dist.src" value="${dist.dir}/src"/>
  <property name="dist.docs" value="${dist.dir}/docs"/>
  <property name="dist.etc" value="${dist.dir}/etc"/>

  <property name="dist.bin.pkg" value="${dist.dir}/bin/${name}"/>
  <property name="dist.lib.pkg" value="${dist.dir}/lib/${name}"/>
  <property name="dist.docs.pkg" value="${dist.dir}/docs/${name}"/>
  <property name="dist.etc.pkg" value="${dist.dir}/etc/${name}"/>
  <property name="dist.javadocs" value="${dist.dir}/docs/${name}/javadocs"/>

  <!-- Architecture-specific files (shared libraries) -->
  <property name="dist.lib.arch" value="${dist.lib}/${os.arch}"/>
  <property name="src.lib.arch" value="${src.jars.dir}/${os.arch}"/>
  <property name="build.lib.arch" value="${build.lib}/${os.arch}"/>

  <!-- Version for zipped/tarred export files. -->
  <property name="dist.version" value="${name}-${version}"/>

  <!-- File for logging the files that are copied by the install target -->
  <property name="install.log" value=".${name}.install"/>
  <property name="install.overwrite" value="true"/>

  <!-- Local webstart properties. Note this needs a local keystore,
   !   assumed to be called keystore in $star.build.dir, .. by
   !   default. -->
  <property name="webstart.codebase" 
            value="http://starlink.jach.hawaii.edu/starjava/lib"/>
  <property name="webstart.alias" value="Starlink-UK"/>
  <property name="webstart.keystore" value="${star.build.dir}/keystore"/>
  <property name="webstart.keypass" value="Vroomfondel"/>
  <property name="webstart.storepass" value="Majikthise"/>
  <property name="webstart.starlink_logo" value="starlink_logo_med.gif"/>
  <property name="home.page" value="http://www.starlink.ac.uk/${name}"/>

  <!-- Add any local ANT tasks that are required (these should be
   !   moved to ANT if useful beyond the needs of this package) -->

  <!-- Non-standard source file directories -->
  <property name="src.ast" value="${src.dir}/ast"/>
  <property name="src.jni" value="${src.dir}/jni"/>
  <property name="src.perl" value="${src.dir}/perl"/>
  <property name="jdk" value="${java.home}/.."/>
  <property name="stardev" value="/stardev"/>

  <!-- Non-standard build file directories -->
  <property name="build.jni" value="${build.dir}/jni"/>

  <!-- Non-standard files -->
  <property name="perl" value="perl"/>
  <property name="ast.fac.err" value="fac_1521_err"/>
  <property name="shared.object" value="lib${name}.so"/>
  <property name="link.script" value="${name}_libraries"/>

  <!--
   !   =========
   !   CLASSPATH
   !   =========
   !-->

  <!-- Name all the jar files that we directly depend on. These will be
   !   used to produce a full CLASSPATH that is equivalent to that
   !   generated when these are referenced as optional bundled packages.
   !   It's best to have a classpath (rather than use the extension
   !   mechanism) during development as this allows us to compile
   !   without having to work these dependencies out anyway (may
   !   be fixed in Java1.5) plus we can execute against locally built
   !   class files in preference to installed ones (an extra user-define
   !   defined CLASSPATH can also be used as needed).
   !-->
  <extclasspath id="installed.classpath">

    <!-- Util -->
    <pathelement location="${star.jar.dir}/util/util.jar"/>

  </extclasspath>

  <!-- Generate the local build classpath. This is the most difficult
   !   part of handling the classpath. The local classes will be in
   !   the "build/classes" part of each package, plus third party
   !   packages will have their jar files in the "dist" directories.
   !   Having the third party jars not installed means that building a
   !   classpath based on their manifest class-paths will not resolve
   !   all references (these may be to other third party jars, that
   !   are normally resolved using relative URLs). The way that this
   !   is resolved is simply to locate all "build/classes" directories
   !   and all jar files in the "dist" parts and just add these all
   !   to the classpath. Known third party dependencies are added
   !   after the "build/classes" directories using the "extclasspath"
   !   type, just so that they will be referred to first. If this
   !   doesn't work as expected add the additional classes/jars to
   !   the extra classpath.
   !-->
  <extclasspath id="built.jarpath">
    <pathelement location="${star.build.dir}/util/lib/util/util.jar"/>
  </extclasspath>

  <path id="built.classpath">

    <!-- Directly dependent third party jars -->
    <path refid="built.jarpath"/>

    <!-- All locally built classes -->
    <dirset dir="${star.build.dir}">
      <include name="*/build/classes"/>
    </dirset>

    <!-- Finally add all "dist" jar files to make sure everything is
     !   resolved, including relative URLs out of the local package -->
    <fileset dir="${star.build.dir}">
      <include name="*/lib/*/*.jar"/>
    </fileset>

    <!-- Note in passing a more elegant way to resolve these jars
     !   would be to extend <extclasspath> to go looking for dependent
     !   jars using an additional resolving mechanism-->

  </path>

  <!-- Extra user-defined classpath. This is set by the property 
   !   "extra.class.path" (which can be defined locally using say 
   !   -Dextra.class.path=$CLASSPATH on the command line or by setting
   !   the property in either of the properties files.-->
  <property name="extra.class.path" value=""/>
  <path id="local.classpath" path="${extra.class.path}"/>

  <!-- Unification of all classpaths using extra, built, installed order-->
  <path id="classpath">
    <path refid="local.classpath"/>
    <path refid="built.classpath"/>
    <path refid="installed.classpath"/>
  </path>

  <!-- JUnit tests classpath -->
  <path id="tests-classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.tests}"/>
    <pathelement location="${tests.dir}"/>
    <pathelement location="${tests.etc.dir}"/>
    <path refid="classpath"/>
  </path>

  <!-- Turn this path into a string which is passed to the tests -->
  <property name="tests-classpath.value" refid="tests-classpath"/>

  <!--
   !    =========================================
   !    Check availability of direct dependencies
   !    =========================================
   !    (could also use this to check optional elements).
   !
   ! If any of the required dependencies are not present then
   ! this throws a <fail> and exits the build.
   !-->
  <target name="check_packages"
          unless="runonly.install">

    <!-- Need Util -->
    <available property="util.present"
               classpathref="classpath"
               classname="uk.ac.starlink.util.Loader"/>
    <fail message="No Util available" unless="util.present"/>

    <!-- Need JUnit for testcases, not essential -->
    <condition property="testframework.present">
      <and>
        <available classpathref="tests-classpath"
                   classname="junit.framework.TestCase"/>
        <available classpathref="tests-classpath"
                   classname="uk.ac.starlink.util.TestCase"/>
      </and>
    </condition>

  </target>

  <!--
   !   =================
   !   Prepare the build
   !   =================
   !
   !  Do any jobs that are required before any other target can proceed.
   !-->
  <target name="prepare">

    <tstamp>
      <format property="year" pattern="yyyy"/>
    </tstamp>

    <!-- This is a filterchain that can be used to copy-edit files
     !   that require the package version, current date and/or time -->
    <filterchain id="filters">
      <replacetokens>
        <token key="VERSION" value="${version}"/>
        <token key="DATE" value="${TODAY}"/>
        <token key="TIME" value="${TSTAMP}"/>
      </replacetokens>
    </filterchain>

  </target>


  <!--
   !   ==============
   !   Build the code
   !   ==============
   !
   !  The results of the compilation are placed in the build.classes
   !  directory. Other files that are also needed in the classes tree
   !  (i.e. resources like images) should also be copied into place here.
   !-->
  <target name="build"
          depends="prepare, check_packages, build_classes, unpack_jni"
          unless="runonly.install"
          description="-> compiles the source code">

    <!-- Copy extra files that should live with packages classes
     !   (i.e. are discovered using "getResource()"). -->
    <copy todir="${build.classes}">
      <fileset dir="${java.dir}" includes="[none]"/>
    </copy>

    <!-- Local third party jars, if any. Copy straight into
     !   distribution directories to save on unnecessary copies and to
     !   make these available for resolution by other locally built
     !   packages that are using this one -->
    <!--
     !  <mkdir dir="${dist.lib.pkg}"/>
     !  <copy todir="${dist.lib.pkg}">
     !  </copy>
     !-->

  </target>

  <!-- Build the java class files. -->
  <target name="build_classes">
    <mkdir dir="${build.classes}"/>
    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           source="${source.version}"
           deprecation="${deprecation}"
           optimize="${optimize}">
      <classpath refid="classpath"/>

      <!-- Exclude any Java files in the source tree that should not be
       !   compiled -->
      <exclude name="**/retired_code/*"/>
      <exclude name="**/*Test*"/>
    </javac>
  </target>


  <!-- Pulls the architecture-specific shared libraries out of the source
   !   jar files in which they live.  These jar files are in the CVS
   !   repository, they are not built as part of the normal build target.
   !   The one specific to the build-time architecture can be built
   !   using the 'build-native' target, but this requires more than the
   !   basic CVS files to work (e.g. it needs the stardev classic libraries).
   !-->
  <target name="unpack_jni">
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="i386"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="sparc"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="x86"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="ppc"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="amd64"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="x86_64"/>
    </antcall>
    <antcall target="unpack_jni_arch">
      <param name="unpack.arch" value="aarch64"/>
    </antcall>
  </target>

  <!-- Architecture-specific JNI jar file unpacker -->
  <target name="unpack_jni_arch">
    <unjar src="${src.jars.dir}/${unpack.arch}/${name}_libs.jar"
           dest="${dist.lib}/${unpack.arch}">
      <patternset excludes="META-INF*/*"/>
    </unjar>
  </target>

  <!--
   !  ==================================================
   !  Builds all secondary source files from true source
   !  ==================================================
   !
   !  This processes Perl 'true' source files to generate some of the java
   !  source files and C source files.  Since it requires Perl, it is
   !  not a dependency of any of the other public targets, and is not
   !  be invoked as part of the normal build process.  It should be 
   !  invoked when the perl source files have been changed, and the
   !  resulting new 'source' files (in src/main and src/jni) checked in.
   !-->
  <target name="build-source"
          description="-> builds java source code from Perl and AST">

    <!-- Build the java classes which correspond to AST classes -->
    <antcall target="perl_to_java">
      <param name="pj.class" value="AstObject"/>
      <param name="pj.cfile" value="object.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Box"/>
      <param name="pj.cfile" value="box.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Channel"/>
      <param name="pj.cfile" value="channel.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Circle"/>
      <param name="pj.cfile" value="circle.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="CmpFrame"/>
      <param name="pj.cfile" value="cmpframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="CmpMap"/>
      <param name="pj.cfile" value="cmpmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="CmpRegion"/>
      <param name="pj.cfile" value="cmpregion.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="DSBSpecFrame"/>
      <param name="pj.cfile" value="dsbspecframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Ellipse"/>
      <param name="pj.cfile" value="ellipse.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="FitsChan"/>
      <param name="pj.cfile" value="fitschan.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="FluxFrame"/>
      <param name="pj.cfile" value="fluxframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Frame"/>
      <param name="pj.cfile" value="frame.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="FrameSet"/>
      <param name="pj.cfile" value="frameset.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="GrismMap"/>
      <param name="pj.cfile" value="grismmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Interval"/>
      <param name="pj.cfile" value="interval.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="KeyMap"/>
      <param name="pj.cfile" value="keymap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="LutMap"/>
      <param name="pj.cfile" value="lutmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Mapping"/>
      <param name="pj.cfile" value="mapping.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="MathMap"/>
      <param name="pj.cfile" value="mathmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="MatrixMap"/>
      <param name="pj.cfile" value="matrixmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="NullRegion"/>
      <param name="pj.cfile" value="nullregion.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="PcdMap"/>
      <param name="pj.cfile" value="pcdmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="PermMap"/>
      <param name="pj.cfile" value="permmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Plot"/>
      <param name="pj.cfile" value="plot.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Polygon"/>
      <param name="pj.cfile" value="polygon.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="PolyMap"/>
      <param name="pj.cfile" value="polymap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="PointList"/>
      <param name="pj.cfile" value="pointlist.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Prism"/>
      <param name="pj.cfile" value="prism.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="RateMap"/>
      <param name="pj.cfile" value="ratemap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Region"/>
      <param name="pj.cfile" value="region.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SelectorMap"/>
      <param name="pj.cfile" value="selectormap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="ShiftMap"/>
      <param name="pj.cfile" value="shiftmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SlaMap"/>
      <param name="pj.cfile" value="slamap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SkyFrame"/>
      <param name="pj.cfile" value="skyframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SpecFluxFrame"/>
      <param name="pj.cfile" value="specfluxframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SpecFrame"/>
      <param name="pj.cfile" value="specframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SpecMap"/>
      <param name="pj.cfile" value="specmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SphMap"/>
      <param name="pj.cfile" value="sphmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="Stc"/>
      <param name="pj.cfile" value="stc.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="StcCatalogEntryLocation"/>
      <param name="pj.cfile" value="stccatalogentrylocation.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="StcObsDataLocation"/>
      <param name="pj.cfile" value="stcobsdatalocation.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="StcResourceProfile"/>
      <param name="pj.cfile" value="stcresourceprofile.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="StcSearchLocation"/>
      <param name="pj.cfile" value="stcsearchlocation.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="SwitchMap"/>
      <param name="pj.cfile" value="switchmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="TimeFrame"/>
      <param name="pj.cfile" value="timeframe.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="TimeMap"/>
      <param name="pj.cfile" value="timemap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="TranMap"/>
      <param name="pj.cfile" value="tranmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="UnitMap"/>
      <param name="pj.cfile" value="unitmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="WcsMap"/>
      <param name="pj.cfile" value="wcsmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="WinMap"/>
      <param name="pj.cfile" value="winmap.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="XmlChan"/>
      <param name="pj.cfile" value="xmlchan.c"/>
    </antcall>
    <antcall target="perl_to_java">
      <param name="pj.class" value="ZoomMap"/>
      <param name="pj.cfile" value="zoommap.c"/>
    </antcall>

    <!-- Build AstException C source -->
    <exec executable="${perl}"
          output="${src.jni}/AstException.c"
          logError="yes"
          failonerror="yes">
      <arg file="${src.perl}/AstException.pl"/>
      <arg value="-c"/>
      <arg file="${src.ast}/${ast.fac.err}"/>
    </exec>

    <!-- Build AstException Java source -->
    <exec executable="${perl}" 
          output="${java.dir}/${package.path}/AstException.java"
          logError="yes"
          failonerror="yes">
      <arg file="${src.perl}/AstException.pl"/>
      <arg value="-java"/>
      <arg file="${src.ast}/${ast.fac.err}"/>
    </exec>

    <!-- Build miscellaneous Java sources -->
    <exec executable="${perl}"
          output="${java.dir}/${package.path}/UinterpCalculator.java"
          logError="yes"
          failonerror="yes">
      <arg file="${src.perl}/UinterpCalculator.pl"/> 
    </exec>

  </target>

  <!-- Processes a perl file and AST C source file to generate a java source
   !   file.
   !   Parameters are:
   !      pj.class:  class of java source file to produce
   !      pj.cfile:  name of AST C source input file
   !-->
  <target name="perl_to_java">
    <echo message="Generating ${pj.class}.java"/>
    <exec executable="${perl}"
          output="${java.dir}/${package.path}/${pj.class}.java"
          logError="yes"
          failonerror="yes">
      <arg value="-I${src.perl}"/>
      <arg file="${src.perl}/${pj.class}.pl"/>
      <arg file="${src.ast}/${pj.cfile}"/>
    </exec>
  </target>


  <!--
   !  ============================================
   !  Build the native shared library from sources
   !  ============================================
   !
   !  This does the actual build of the shared library for the build-time
   !  architecture, and requires a stardev installation.  It is not a
   !  dependency of any of the other public targets, and should not be
   !  invoked as part of the normal build process.  It should be invoked
   !  periodically (when AST or JNIAST changes), once on each of the
   !  supported platforms, and the resulting new 'source' files 
   !  (shared library jar files) checked in.
   !
   !  Note that the C compilations may fail if an attempt is made to
   !  compile against the wrong AST version.
   !-->
  <target name="build-native"
          depends="assemble_jni"
          description="-> builds native library from C sources">

    <!-- Extract the existing libraries from the jar file. There may
     !   be more than one library per architecture (i386 Linux and OS X)
     !   and we want to keep the other libraries. The datestamps should 
     !   be in the past otherwise this will fail
     !-->
    <unjar dest="${build.lib.arch}">
      <fileset file="${src.lib.arch}/${name}_libs.jar"/>
    </unjar>


    <!-- Build the library -->
    <antcall target="execute_mk_script">
      <param name="mk.action" value="shared"/>
    </antcall>

    <!-- Jar it up and copy it into the source tree ready for CVS checkin -->
    <jar destfile="${src.lib.arch}/${name}_libs.jar"
         basedir="${build.lib.arch}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
      </manifest>
    </jar>
  </target>


  <!--
   !  ===================================
   !  Execute shareable library MK script
   !  ===================================
   !  Execute the "mk" script that creates the package shareable
   !  library. The action performed is controlled by the "mk.action"
   !  property that should be defined before an antcall to this
   !  target.
   !-->
  <target name="execute_mk_script">

    <!-- Execute the given action for all known operating system types.
     !   This uses modified mk and makefiles from an old-style system
     !   which should be stored in ${src.jni} along with the source
     !   code. Note some of these OS names seem to change from time to
     !   time and across JVMs, so beware. Clearly this is not portable.
     !   Since the different OSs are detected and catered for here,
     !   it would be possible to remove the mk step fairly easily and
     !   make could be invoked directly from here, if preferred.
     !-->

    <!-- Local and installed versions of any shareable libraries that we
     !   require to resolve against in a form for the UNIX "ld" command
     !-->
    <property name="java.shareables" value=""/>

    <mkdir dir="${build.lib.arch}"/>

    <echo message="java.home=${java.home}"/>

    <exec dir="${build.jni}" executable="${build.jni}/mk" os="Linux"
          failonerror="yes">
      <env key="SYSTEM" value="ix86_Linux"/>
      <env key="JAVA_SYSTEM" value="linux"/>
      <env key="STARLINK" value="${stardev}"/>
      <env key="ADDLIBS" value="-L${stardev.add}/lib"/>
      <env key="ADDINCS" value="-I${stardev.add}/include"/>
      <env key="ADDCFLAGS" value="${stardev.addcflags}"/>
      <env key="JDK" value="${jdk}"/>
      <env key="JAVA_SHAREABLES" value="${java.shareables}"/>
      <env key="TARGET_LIB" value="${build.lib.arch}"/>
      <arg line="${mk.action}"/>
    </exec>

    <exec dir="${build.jni}" executable="${build.jni}/mk" os="SunOS"
          failonerror="yes">
      <env key="SYSTEM" value="sun4_Solaris"/>
      <env key="JAVA_SYSTEM" value="${os.arch}"/>
      <env key="STARLINK" value="${stardev}"/>
      <env key="ADDLIBS" value="-L${stardev.add}/lib"/>
      <env key="ADDINCS" value="-I${stardev.add}/include"/>
      <env key="ADDCFLAGS" value="${stardev.addcflags}"/>
      <env key="JDK" value="${jdk}"/>
      <env key="JAVA_SHAREABLES" value="${java.shareables}"/>
      <env key="TARGET_LIB" value="${build.lib.arch}"/>
      <arg line="${mk.action}"/>
    </exec>

    <!-- Mac on ARM.  Slight adjustments may be required for Intel. -->
    <exec dir="${build.jni}" executable="${build.jni}/mk" os="Mac OS X"
          failonerror="yes" >
      <env key="SYSTEM" value="MacOSX"/>
      <env key="JAVA_SYSTEM" value="arm64"/>
      <env key="STARLINK" value="${stardev}"/>
      <env key="ADDLIBS" value="-L${stardev.add}/lib"/>
      <env key="ADDINCS" value="-I${stardev.add}/include"/>
      <env key="ADDCFLAGS" value="${stardev.addcflags}"/>
      <env key="JDK" value="${jdk}"/>
      <env key="JAVA_SHAREABLES" value="${java.shareables}"/>
      <env key="TARGET_LIB" value="${build.lib.arch}"/>
      <env key="STARJAVA_LIB" value="${star.install}/lib/${os.arch}"/>
      <arg line="${mk.action}"/>
    </exec>

    <exec dir="${build.jni}" executable="${build.jni}/mk" os="OSF1"
          failonerror="yes">
      <env key="SYSTEM" value="alpha_OSF1"/>
      <env key="JAVA_SYSTEM" value="alpha"/>
      <env key="STARLINK" value="${stardev}"/>
      <env key="ADDLIBS" value="-L${stardev.add}/lib"/>
      <env key="ADDINCS" value="-I${stardev.add}/include"/>
      <env key="ADDCFLAGS" value="${stardev.addcflags}"/>
      <env key="JDK" value="${jdk}"/>
      <env key="JAVA_SHAREABLES" value="${java.shareables}"/>
      <env key="TARGET_LIB" value="${build.lib.arch}"/>
      <arg line="${mk.action}"/>
    </exec>

  </target>


  <!--
   !   Put all the source files required for compilation of the shared
   !   library in the build directory.  Some of these are copied directly
   !   from source directories, some are generated from perl source
   !   or using javah from class files.
   !-->
  <target name="assemble_jni" depends="prepare, build_classes">

    <copy todir="${build.jni}">
      <fileset dir="${src.jni}" includes="*.c *.h makefile mk ${link.script}"/>
      <fileset dir="${src.ast}" includes="grf.h"/>
      <fileset dir="${src.ast}" includes="ast_link"/>
    </copy>

    <chmod perm="ugo+rx">
      <fileset dir="${build.jni}" includes="mk ${link.script} ast_link"/>
    </chmod>

    <javah classpath="${build.classes}" destdir="${build.jni}" verbose="yes">
      <class name="${package.name}.AstException"/>
      <class name="${package.name}.AstObject"/>
      <class name="${package.name}.Box"/>
      <class name="${package.name}.Channel"/>
      <class name="${package.name}.Circle"/>
      <class name="${package.name}.CmpFrame"/>
      <class name="${package.name}.CmpMap"/>
      <class name="${package.name}.CmpRegion"/>
      <class name="${package.name}.DSBSpecFrame"/>
      <class name="${package.name}.Ellipse"/>
      <class name="${package.name}.FitsChan"/>
      <class name="${package.name}.FluxFrame"/>
      <class name="${package.name}.Frame"/>
      <class name="${package.name}.FrameSet"/>
      <class name="${package.name}.GrismMap"/>
      <class name="${package.name}.Interval"/>
      <class name="${package.name}.IntraMap"/>
      <class name="${package.name}.KeyMap"/>
      <class name="${package.name}.LutMap"/>
      <class name="${package.name}.Mapping"/>
      <class name="${package.name}.MathMap"/>
      <class name="${package.name}.MatrixMap"/>
      <class name="${package.name}.NullRegion"/>
      <class name="${package.name}.PcdMap"/>
      <class name="${package.name}.PermMap"/>
      <class name="${package.name}.Plot"/>
      <class name="${package.name}.Polygon"/>
      <class name="${package.name}.PolyMap"/>
      <class name="${package.name}.PointList"/>
      <class name="${package.name}.Prism"/>
      <class name="${package.name}.RateMap"/>
      <class name="${package.name}.Region"/>
      <class name="${package.name}.SelectorMap"/>
      <class name="${package.name}.ShiftMap"/>
      <class name="${package.name}.SkyFrame"/>
      <class name="${package.name}.SlaMap"/>
      <class name="${package.name}.SpecFluxFrame"/>
      <class name="${package.name}.SpecFrame"/>
      <class name="${package.name}.SpecMap"/>
      <class name="${package.name}.SphMap"/>
      <class name="${package.name}.Stc"/>
      <class name="${package.name}.StcCatalogEntryLocation"/>
      <class name="${package.name}.StcObsDataLocation"/>
      <class name="${package.name}.StcResourceProfile"/>
      <class name="${package.name}.StcSearchLocation"/>
      <class name="${package.name}.SwitchMap"/>
      <class name="${package.name}.TimeFrame"/>
      <class name="${package.name}.TimeMap"/>
      <class name="${package.name}.TranMap"/>
      <class name="${package.name}.UnitMap"/>
      <class name="${package.name}.WcsMap"/>
      <class name="${package.name}.WinMap"/>
      <class name="${package.name}.ZoomMap"/>
      <class name="${package.name}.grf.GrfEscape"/>
    </javah>
  </target>

  <!--
   !   ============================
   !   Create the package jar files
   !   ============================
   !
   !  Creates a jar file from the build.classes directory tree. If
   !  jars of components are also required these should be created
   !  here too. Note this requires a manifest file that defines the
   !  jars that we directly depend on (using relative URLs).
   !  Builds a jar of the java source too.
   !-->
  <target name="jars"
          depends="build"
          unless="runonly.install"
          description="-> creates the package jar file">

    <mkdir dir="${dist.lib.pkg}"/>
    <jar destfile="${dist.lib.pkg}/${name}.jar" basedir="${build.classes}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Class-Path" value="${jar.class.path}"/>
      </manifest>
    </jar>

    <!-- Architecture dependent jar files (shareable libraries for
     !   webstart) -->
    <copy todir="${dist.lib}">
       <fileset dir="${src.jars.dir}" includes="**/*.jar **/*.zip"/>
    </copy>

    <!-- Sign all jar files -->
    <antcall target="signjars"/>
  </target>

  <target name="signjars" if="sign.jars">
    <signjar alias="${webstart.alias}"
             keystore="${webstart.keystore}"
             keypass="${webstart.keypass}"
             storepass="${webstart.storepass}">
      <fileset dir="${dist.lib}" includes="**/*.jar **/*.zip"/>
    </signjar>
  </target>

  <!--
   !   ========================================
   !   Make package JNLP file for Java webstart
   !   ========================================
   !-->
  <target name="webstart"
          description="-> create webstart descriptor files">

    <!-- Create a webstart JNLP file for this package, this goes into
     !   "dist.lib" -->
    <mkdir dir="${dist.lib}"/>
    <jnlp toFile="${dist.lib}/${name}.jnlp" href="${name}.jnlp"
          codebase="${webstart.codebase}">
      <information>
         <title>JNIAST - Java Native Interface to AST</title>
         <vendor>Starlink UK</vendor>
         <homepage href="${home.page}"/>
         <icon href="${webstart.starlink_logo}"/>
         <description>"Starlink JNIAST - Webstart edition"</description>
         <offline_allowed/>
       </information>
       <security>
          <all_permissions/>
       </security>
       <resources>
         <j2se version="1.6+"/>
         <jar href="${name}/${name}.jar"/>
         <extension name="UTIL" href="util.jnlp"/>
       </resources>

       <!-- Linux -->
       <resources os="Linux" arch="i386">
         <nativelib href="i386/${name}_libs.jar"/>
       </resources>
       <resources os="Linux" arch="amd64">
         <nativelib href="amd64/${name}_libs.jar"/>
       </resources>

       <!-- IBM Linux -->
       <resources os="Linux" arch="x86">
         <nativelib href="i386/${name}_libs.jar"/>
       </resources>

       <!-- Windows -->
       <resources os="Windows" arch="x86">
          <nativelib href="x86/${name}_libs.jar"/>
       </resources>
       <resources os="Windows" arch="amd64">
          <nativelib href="amd64/${name}_libs.jar"/>
       </resources>

       <!-- SUN Solaris -->
       <resources os="SunOS" arch="sparc">
         <nativelib href="sparc/${name}_libs.jar"/>
       </resources>

       <!-- Mac OS X -->
       <resources os="Mac OS X" arch="ppc">
         <nativelib href="ppc/${name}_libs.jar"/>
       </resources>
       <resources os="Mac OS X" arch="i386">
         <nativelib href="i386/${name}_libs.jar"/>
       </resources>
       <resources os="Mac OS X" arch="x86_64">
         <nativelib href="x86_64/${name}_libs.jar"/>
       </resources>
       <resources os="Mac OS X" arch="ppc64">
         <nativelib href="ppc64/${name}_libs.jar"/>
       </resources>

       <component_desc/>
    </jnlp>
  </target>

  <!--
   !   =============================
   !   Create the local distribution
   !   =============================
   !
   !  Creates a local distribution in the directory "dist.dir"
   !  (usually the current directory). Installations are based on this
   !  distribution. If the "runonly.install" parameter is set then this
   !  target is skipped (needed for releases that do not have source).
   !-->
  <target name="dist"
          depends="build,jars,javadocs,webstart"
          unless="runonly.install"
          description="-> creates the local binary distribution">

    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.lib.pkg}"/>
    <mkdir dir="${dist.lib.arch}"/>
    <mkdir dir="${dist.docs.pkg}"/>

    <!-- Set permissions on contents of distribution directory -->
    <chmod perm="ugo+rx" dir="${dist.dir}" type="dir" includes="**"
           failonerror="${chmod.fail}"/>
    <chmod perm="ugo+r" dir="${dist.dir}" type="file" includes="**"
           failonerror="${chmod.fail}"/>

  </target>

  <!--
   !   ========================
   !   Create the full releases
   !   ========================
   !
   !  Creates the full "zip", "tar" and "bzip" archives of the
   !  products of the "dist" target and the source directory.
   !  The archives are designed to be unpacked such that the resultant
   !  directory layout can be either used as a local distribution, or
   !  installed into a Starlink tree (installation requires the
   !  Starlink modified version of ANT, use as a local distribution
   !  may need special handling of the extension path). This version
   !  can also be used to rebuild the package from source.
   !
   !  The archive names are ${dist.version}-${os.name}.<ext>.
   !-->
  <target name="export"
          description="-> creates the full distribution archives">

    <antcall target="create_archives">
      <param name="source.required" value="true"/>
      <param name="binary.required" value="true"/>
      <param name="archive.name" value="${dist.version}"/>
    </antcall>

  </target>

  <!--
   !   ==========================
   !   Create the source releases
   !   ==========================
   !
   !  Creates the source only "zip", "tar" and "bzip" archives.
   !  These can be used to rebuild the package (requires the Starlink
   !  modified version of ANT).
   !
   !  The archive names are ${dist.version}-src.<ext>.
   !-->
  <target name="export-source"
          description="-> creates the source distribution archives">

    <antcall target="create_archives">
      <param name="source.required" value="true"/>
      <param name="archive.name" value="${dist.version}-src"/>
    </antcall> 

  </target>

  <!--
   !   ===========================
   !   Create the runonly releases
   !   ===========================
   !
   !  Creates the runonly "zip", "tar" and "bzip" archives of the
   !  products of the "dist" target. The archives are designed to be
   !  unpacked such that the resultant directory layout can be either
   !  used as a local distribution, or installed into a Starlink tree
   !  (installation requires the Starlink modified version of ANT).
   !
   !  The archive names are ${dist.version}-bin-${os.name}.<ext>.
   !-->
  <target name="export-runonly"
          description="-> creates the runonly distribution archives">

    <antcall target="create_archives">
      <param name="binary.required" value="true"/>
      <param name="archive.name" value="${dist.version}-bin"/>
    </antcall>

  </target>

  <!--
   ! Create release archives of the various types required. Use this
   ! by an <antcall> and set the property "archive.name" to define what
   ! name to use for the outfile files. The archives are written into
   ! the directory ${star.archive.dir} (the local directory by default).
   !
   ! If the property "binary.required" is set then the files needed
   ! for a run-only release are included and if "source.required" is
   ! defined the source code is also included.
   !
   ! For binary archives which contain platform-dependent code (e.g.
   ! shareable libraries) the operating system name is appended to
   | the archive name.
   !-->
  <target name="create_archives"
          depends="dist">

    <mkdir dir="${star.archive.dir}"/>

    <condition property="os.spec" value="-${os.name}">
      <isset property="binary.required"/>
    </condition>
    <condition property="os.spec" value="">
      <not>
        <isset property="binary.required"/>
      </not>
    </condition>

    <zip destfile="${star.archive.dir}/${archive.name}${os.spec}.zip">

      <!-- All releases have the documentation and build file -->
      <zipfileset dir="${dist.docs}" prefix="${name}/docs"/>
      <zipfileset dir="${dist.dir}" includes="build.xml" prefix="${name}"/>

      <zipfileset dir="${dist.lib}" prefix="${name}/lib">
        <include name="**" if="binary.required"/>
      </zipfileset>

      <zipfileset dir="${src.dir}" prefix="${name}/src">
        <include name="**" if="source.required"/>
      </zipfileset>

    </zip>

    <!-- Note: creating a tar file with empty directories doesn't
     !   work, so the directory structure may be incomplete -->
    <property name="tarfile.name" value="${archive.name}${os.spec}.tar"/>
    <tar longfile="gnu" destfile="${tarfile.name}">

      <!-- All releases have the documentation and build file -->
      <tarfileset dir="${dist.docs}" prefix="${name}/docs"/>
      <tarfileset dir="${dist.dir}" prefix="${name}">
        <include name="build.xml"/>
      </tarfileset>

      <tarfileset dir="${dist.lib}" prefix="${name}/lib">
        <include name="**" if="binary.required"/>
      </tarfileset>

      <tarfileset dir="${src.dir}" prefix="${name}/src">
        <include name="**" if="source.required"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${star.archive.dir}/${tarfile.name}.gz" 
          src="${tarfile.name}"/>
    <bzip2 zipfile="${star.archive.dir}/${tarfile.name}.bz2"
           src="${tarfile.name}"/>
    <delete file="${tarfile.name}"/>

  </target>

  <!--
   !   ============================================
   !   Cleans up build and distribution directories
   !   ============================================
   !-->
  <target name="clean"
          description="-> cleans up build and dist products">

    <delete dir="${build.dir}"/>
    <delete dir="${dist.bin}"/>
    <delete dir="${dist.lib}"/>
    <delete dir="${dist.docs}"/>
    <delete dir="${dist.etc}"/>

  </target>

  <!--
   !   ================================
   !   Install into the "Starlink" tree
   !   ================================
   !
   ! Installs the "dist" target products into another set of
   ! directories.
   !
   ! An installed system is potentially "undoable" as the copied names
   ! and package-specific directories are logged to "${install.log}".
   !-->
  <target name="install"
          depends="dist"
          description="-> install distribution into Starlink tree">

    <!-- Installation based directories (based on "star.install")-->
    <property name="star.bin" value="${star.install}/bin"/>
    <property name="star.lib" value="${star.install}/lib"/>
    <property name="star.etc" value="${star.install}/etc"/>
    <property name="star.docs" value="${star.install}/docs"/>
    <property name="star.bin.pkg" value="${star.bin}/${name}"/>
    <property name="star.lib.pkg" value="${star.lib}/${name}"/>
    <property name="star.etc.pkg" value="${star.etc}/${name}"/>
    <property name="star.docs.pkg" value="${star.docs}/${name}"/>
    <property name="star.lib.arch" value="${star.lib}/${os.arch}"/>
    <mkdir dir="${star.install}"/>
    <mkdir dir="${star.lib.pkg}"/>
    <mkdir dir="${star.docs.pkg}"/>
    <mkdir dir="${star.lib.arch}"/>

    <loggedcopy todir="${star.lib}"
                logfile="${install.log}"
                overwrite="${install.overwrite}"
                logfileAppend="false">
      <fileset dir="${dist.lib}">
        <include name="**/*.jnlp"/>
        <include name="**/*.jar"/>
        <include name="**/*.zip"/>
        <include name="**/*.so"/>
        <include name="**/*.dll"/>
        <include name="**/*.jnilib"/>
      </fileset>
    </loggedcopy>

    <!-- Also remove the package-specific directory. 
     !   Note exact format is required.-->
    <echo file="${install.log}" append="true">${star.lib.pkg}
</echo>

    <loggedcopy todir="${star.docs}"
                logfile="${install.log}"
                overwrite="${install.overwrite}"
                logfileAppend="true">
      <fileset dir="${dist.docs}" excludes="${unfiltered.files}"/>
      <filterchain refid="filters"/>
    </loggedcopy>

    <loggedcopy todir="${star.docs}" filtering="false"
                logfile="${install.log}"
                overwrite="${install.overwrite}"
                logfileAppend="true">
      <fileset dir="${dist.docs}" includes="${unfiltered.files}"/>
    </loggedcopy>
    <echo file="${install.log}" append="true">${star.docs.pkg}
</echo>

  </target>

  <!--
   !   ========================================
   !   Install runonly into the "Starlink" tree
   !   =========================================
   !
   ! Do an install using only the contents of a binary release (a
   ! source-free runonly system).
   !-->
  <target name="install-runonly"
          description="-> install a runonly distribution into Starlink tree">

    <!-- Make sure that the expected file structure exists, some
         of these files can be missing if originally empty -->
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.lib.pkg}"/>
    <mkdir dir="${dist.lib.arch}"/>
    <mkdir dir="${dist.docs.pkg}"/>

    <!-- Do normal install, but with many targets switched off-->
    <antcall target="install">
      <param name="runonly.install" value="true"/>
      <param name="javadoc.notrequired" value="true"/>
    </antcall>

  </target>

  <!--
   !   ===================================
   !   De-install from the "Starlink" tree
   !   ===================================
   !
   ! Uses the content of the "${install.log}" to remove the files
   ! that were copied into place by the install target.
   !-->
 <target name="deinstall"
          description="-> undo the install target">

    <available file="${install.log}" property="install.log.present"/>

    <antcall target="real_deinstall"/>

  </target>

  <!-- Real deinstall target. Only activated if "install.log.present"
   !   is defined -->
  <target name="real_deinstall" 
          if="install.log.present">

    <loadfile property="files" srcFile="${install.log}"/>
    <listdelete>
      <filelist dir="/" files="${files}"/>
    </listdelete>

    <delete file="${install.log}" failonerror="false"/>

  </target>

  <!--
   !   =============================
   !   Creates the API documentation
   !   =============================
   !
   !  The documentation is created from the Java sources. Should also
   !  extend this to include the possibility of other miscellaneous
   !  documentation (FAQs etc.).
   !-->
  <target name="javadocs"
          depends="prepare,javadoc_check"
          unless="javadoc.notrequired"
          description="-> creates the API documentation">

    <mkdir dir="${dist.javadocs}"/>
    <javadoc useexternalfile="yes"
             destdir="${dist.javadocs}"
             author="true"
             version="true"
             source="${source.version}"
             locale="en"
             windowtitle="${Name} API"
             doctitle="${Name}"
             classpathref="classpath">
      <arg value="-Xdoclint:all,-missing,-html"/>
      <arg value="-quiet"/>

      <!-- Exclude broken and test files etc. from the document -->
      <packageset dir="${java.dir}" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <!-- Link to the full Java API at SUNs website -->
      <link offline="true" href="${javaapi.url}"
            packagelistLoc="${javaapi.lis}"/>

      <group title="${Name} API" packages="${package.name}*"/>

      <bottom><![CDATA[<i>Copyright &#169; ${year} Central Laboratory of the Research Councils. All Rights Reserved.<i>]]></bottom>
    </javadoc>

  </target>

  <!-- This checks if the javadocs are up to date with respect to the
   !   java source, if so then the "javadoc.notrequired" variable is
   !   set true. Note this is check is not performed if
   !   javadoc.notrequired is already set (by .properties) -->
  <target name="javadoc_check"
          unless="javadoc.notrequired">

    <uptodate property="javadoc.notrequired"
              targetfile="${dist.javadocs}/packages.html" >
        <srcfiles dir= "${java.dir}" includes="**/*.java"/>
    </uptodate>

  </target>

  <!--
   !   =========================================
   !   Makes the API java source files available
   !   =========================================
   !
   !  The full API documentation is created from all the various
   !  packages (of which this package is just one). This target makes
   !  the source code that should be used in the full public API
   !  available in a special part of the build tree so that it can be
   !  automatically discovered. This method works around two potential
   !  problems, not all source code the in src/main directories should be
   !  in the API docs, and it's not possible to make this distinction
   !  easily outside this package (cannot pass out a fileset), plus
   !  some code is generated, so cannot be located by scanning the
   !  src/main tree. When javadocs can be generated incrementally this
   !  arrangement should be reworked to generate whatever is needed as
   !  part of the javadocs target.
   !-->
  <target name="javadoc-sources"
          description="-> make source files for release API documention">
    <mkdir dir="${build.java}"/>
    <copy todir="${build.java}">
      <fileset dir="${java.dir}" defaultexcludes="yes"/>
    </copy>
  </target>

  <!--
   !   =================
   !   Compile testcases
   !   =================
   !-->
  <target name="compile-tests"
          depends="build"
          if="testframework.present">
    <mkdir dir="${build.tests}"/>

    <javac srcdir="${tests.dir}"
           destdir="${build.tests}"
           debug="${debug}"
           source="${source.version}"
           deprecation="${deprecation}" >
      <classpath refid="tests-classpath"/>
    </javac>
  </target>

  <!--
   !   ============
   !   Run testcase
   !   ============
   !-->
  <target name="test"
          depends="run-tests"
          description="-> run JUnit tests"/>

  <target name="run-tests"
          depends="compile-tests">

    <fail unless="testframework.present"
          message="Test framework is not present"/>

    <junit printsummary="${junit.summary}" haltonfailure="yes"
           filtertrace="${junit.filtertrace}"
           fork="${junit.fork}">
      <classpath refid="tests-classpath"/>

      <sysproperty key="java.library.path" value="${dist.lib.arch}"/>
      <sysproperty key="build.tests" value="${build.tests}"/>
      <sysproperty key="tests-classpath.value"
                   value="${tests-classpath.value}"/>
      <sysproperty key="java.awt.headless" value="${java.awt.headless}"/>

      <formatter type="plain" usefile="false"/>

      <batchtest>
        <fileset dir="${tests.dir}">
          <include name="**/*Test*"/>
          <exclude name="uk/ac/starlink/TestCase.java"/>
        </fileset>
      </batchtest>

    </junit>
  </target>

  <target name="run-single-test"
          if="testcase"
          depends="compile-tests"
          description="-> runs the single unit test defined in the testcase property">

    <fail unless="testframework.present"
          message="Test framework is not present"/>

    <junit printsummary="${junit.summary}"
          haltonfailure="yes"
          fork="${junit.fork}"
          filtertrace="${junit.filtertrace}">
      <sysproperty key="java.library.path" value="${dist.lib.arch}"/>
      <sysproperty key="build.tests" value="${build.tests}"/>
      <sysproperty key="tests-classpath.value"
                   value="${tests-classpath.value}"/>
      <sysproperty key="java.awt.headless" value="${java.awt.headless}"/>
      <classpath refid="tests-classpath"/>
      <formatter type="plain" usefile="false"/>
      <test name="${testcase}"/>
    </junit>
  </target>

  <!--
   ! Get a DTD for this build file. Documentation suggests may be incomplete!
   !
   ! Use:
   !
   !    <!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "./project.dtd">
   !
   ! at head of document to include.
   !-->
  <target name="dtd">
     <antstructure output="project.dtd"/>
  </target>

</project>
