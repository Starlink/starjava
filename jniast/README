This is the JNI wrapper for the Starlink AST library.
Its version numbers track the version numbers of AST (for versions >1.4);
thus JNIAST V2.0-4 must be built against AST V2.0-4 or higher.
If it is not, the build may go ahead OK but the test should fail.

The location of the installed AST package and other supporting packages
(in this case, just SLALIB) are given by the 'stardev' and 'stardev.add'
properties which can be set, as usual in the build file or in your
.stardev.properties file or on the command line.  These are used a bit
like the STARLINK and ADDLIBS environment variables in traditional 
Starlink mk files; the stardev property should normally be set to 
/star or /stardev (top of a normal starlink installation) and stardev.add
may be set to the top of a tree in which selected preferred (presumably
more recent) packages are installed (its default is /stardev/local).

The components picked up from stardev.add and stardev (in that order of
preference) are currently 
   lib/libast*.a
   lib/libsla.a
   include/ast.h

Note that the ast.h include file must match the libast*.a files or trouble
may ensue.

Since 3-FEB-2004 (see below) these additional packages are not required
for a simple build/install cycle.

Partial change log:

14-MAR-2003:
   Version 1.8-13:
      The new version replaces v1.3 (which corresponded to AST V1.8-8).

      New features relating to changes in AST between 1.8-8 and 1.8-13:
         Frame:
            new attributes Top(axis), Bottom(axis)
         WcsMap:
            new constants AST__TPN, AST__SZP
         FitsChan:
            new attributes DefB1950, CarLin
         Plot:
            new graphical elements Axis1, Axis2, Grid1, Grid2,
                                   NumLabs1, NumLabs2, TextLab1, TextLab2,
                                   Ticks1, Ticks2
            new attribute Invisible
            new method boundingBox

      Fixed a bug in javadoc formatting of graphical elements in Plot.

      Modified Plot constructors to take Rectangle2D objects not Rectangles
         (which might be necessary for non-pixel-like Grf implementations).
         Shouldn't result in any backward incompatibility since
         Rectangle is a subclass of Rectangle2D.

      Fixed a bug in the Plot Font attribute - it was a String but is now
         an int as it should be.  This is a backwardly incompatible change.

      Attempted to report when the JNIAST and AST versions are not matching.
         Doesn't work perfectly however since it is hard to interrogate
         the AST library at runtime about its version.

17-MAR-2003:
   Version 2.0-4:
      Includes all the features of AST V2.0-4, the main ones being the 
      new SpecFrame and SpecMap classes.

      Modified the version checking and where the build picks up some files;
      now controlled by the stardev and stardev.add properties defined in
      the build file.

      Some missing documentation was added: Class Applicability sections 
      are now included for those attributes where non-trivial information
      is contained therein.

3-FEB-2004:
   Build system is changed so that 'ant build' doesn't need any funny
   dependencies (for instance stardev or perl).  Some auto-generated
   files are checked into the CVS repository now.  All of these feature
   a banner at the top indicating that they are auto-generated and should
   not be edited by hand.  Two new targets 'build-source' and 'build-native'
   do the generation of these files from the true sources and place
   them in the src/ tree ready for checkin if you're happy with them.
   These targets should be invoked (and the results checked in) when
   the true source files on which they depend are altered.

5-JUL-2005:
   Tagged jniast-3-7.  This contains all the features up to and including
   AST V3.7, *except* the STC-related ones (Region and friends).

11-AUG-2005:
   All features up to v4.0.

25-JUN-2024:
   Provide a MacOS ARM64 native library so that JNIAST-dependent
   packages (mainly SPLAT) can run on an ARM Mac.
   This was hacky; I need to build against a recent starlink version,
   since only recent ones have ARM64 builds, but they use a much later
   version of AST than the one that the Java source code here tracks
   (which I think is AST 5.1).  I do not want to upgrade the whole
   JNIAST package to track the new AST version, which would be a
   considerable amount of work.

   Do the minimum: link against the 2023A starlink release, which
   contains (I think) AST 9.2.10.  However, don't rebuild the java
   source files based on AST 9.2.10.  The only thing I've pulled in
   from the current AST is an update of the ast/ast_link script,
   which differs slightly from the previous one (it adds -lcminpack).
   Then fiddle with the mk and build.xml files slightly to get it
   building on an ARM Mac.  I have not rebuilt the native libraries
   for other architectures.

   This isn't guaranteed to work; backward incompatibilities between
   AST v9.2 and v5.1 could result in runtime failures (possibly
   coredumps).  The unit tests are somewhat comprehensive: they
   invoke most/all of the JNIAST methods, so test whether there are
   obvious API changes that would lead to trouble.  These unit tests
   continue to pass with no changes.  Other than that, just cross
   fingers that nothing breaks catastrophically at runtime.

   If it is required in future to link against a different starlink
   release, or to build on a non-ARM Mac, it may be necessary to
   adjust some of the existing configuration.
